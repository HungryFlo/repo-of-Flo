
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.chart.ui.ApplicationFrame;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

import java.awt.*;

public class LineXYDemo extends ApplicationFrame {
    // 该构造方法中完成了数据集、图表对象和显示图表面板的创建工作
    public LineXYDemo(String title){
        super(title);
        XYDataset dataset = createDataset();             // 创建记录图中坐标点的数据集
        JFreeChart chart = createChart(dataset);         // 使用上一步已经创建好的数据集生成一个图表对象
        ChartPanel chartPanel = new ChartPanel(chart);   // 将上一步已经创建好的图表对象放置到一个可以显示的Panel上
        // 设置GUI面板Panel的显示大小
        chartPanel.setPreferredSize(new Dimension(500, 270));
        setContentPane(chartPanel);                      // 这是JavaGUI的步骤之一，不用过于关心，面向对象课程综合训练的视频中进行了讲解。
    }

    private JFreeChart createChart(XYDataset dataset) {
        // 使用已经创建好的dataset生成图表对象
        // JFreechart提供了多种类型的图表对象，本次实验是需要使用XYLine型的图表对象
        JFreeChart chart = ChartFactory.createXYLineChart(
//                "Comparison of sorting algorithm performance(Repetitive Data)",      // 图表的标题
//                "Data Repetitiveness",                           // 横轴的标题名
//                "running time",                           // 纵轴的标题名
                "Comparison of the space utilization of the two types of arrays",
                "test number",
                "space utilization",
                dataset,                       // 图表对象中使用的数据集对象
                PlotOrientation.VERTICAL,      // 图表显示的方向
                true,                          // 是否显示图例
                false,                         // 是否需要生成tooltips
                false                          // 是否需要生成urls
        );
        // 下面所做的工作都是可选操作，主要是为了调整图表显示的风格
        // 同学们不必在意下面的代码
        // 可以将下面的代码去掉对比一下显示的不同效果
        chart.setBackgroundPaint(Color.WHITE);
        XYPlot plot = (XYPlot)chart.getPlot();
        plot.setBackgroundPaint(Color.lightGray);
        plot.setAxisOffset(new RectangleInsets(5.0, 5.0, 5.0, 6.0));
        plot.setDomainGridlinePaint(Color.WHITE);
        plot.setRangeGridlinePaint(Color.WHITE);
        XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) plot.getRenderer();
        renderer.setDefaultShapesVisible(true);
        renderer.setDefaultShapesFilled(true);
        return chart;
    }

    private double[][] ArrayLog10(double[][] rawdata){
        int row = rawdata.length;
        int column = rawdata[0].length;
        double[][] result = new double[row][column];
        for (int i = 0; i < row; i++) {
            for(int j = 0; j < column; j++){
                result[i][j] = Math.log10(rawdata[i][j]);
            }
        }
        return result;
    }
    private XYDataset createDataset() {
        // 本样例中想要显示的是三组数据的变化图
        // X数组是三组数据共同拥有的x坐标值；Y1、Y2和Y3数组分别存储了三组数据对应的y坐标值
        double[] X = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125};

        double[] Ysr = {646480.0000,810360.0000,5216780.0000,3451820.0000,13326260.0000,53072580.0000,236708440.0000,1101155780.0000,4808753200.0000};
        double[] Yss = {673840.0000,815200.0000,3853560.0000,1939400.0000,7704600.0000,31027140.0000,128925740.0000,693407720.0000,2670950720.0000};
        double[] Ysi = {880000.0000,844980.0000,7165340.0000,3632840.0000,14365020.0000,58608360.0000,252736780.0000,1084954120.0000,4502642480.0000};
        double[] Ysn = {709960.0000,902620.0000,7810680.0000,8972540.0000,19912840.0000,86534640.0000,498192580.0000,2317368140.0000,13764761740.0000};

        double[] Yir = {386280.0000,898000.0000,1149020.0000,1370900.0000,3291480.0000,14115640.0000,53964540.0000,316715600.0000,1586506900.0000};
        double[] Yis = {43180.0000,43720.0000,66320.0000,125640.0000,276080.0000,421140.0000,250280.0000,237340.0000,302640.0000};
        double[] Yii = {764640.0000,1783020.0000,1127500.0000,3463940.0000,6567880.0000,26136200.0000,108678180.0000,495460960.0000,3352051980.0000};
        double[] Yin = {222700.0000,438700.0000,1159760.0000,1667620.0000,5377860.0000,12731920.0000,35900020.0000,156989740.0000,733090540.0000};

        double[] Yshr = {175020.0000,148880.0000,361760.0000,322840.0000,784160.0000,982520.0000,2201940.0000,2746840.0000,9321320.0000};
        double[] Yshs = {170160.0000,183120.0000,370640.0000,405920.0000,191160.0000,442780.0000,320280.0000,644640.0000,1467720.0000};
        double[] Yshi = {141660.0000,134840.0000,268200.0000,355320.0000,886880.0000,917120.0000,1243420.0000,1090480.0000,2299960.0000};
        double[] Yshn = {173480.0000,119220.0000,227160.0000,488580.0000,632280.0000,1114120.0000,971400.0000,1399820.0000,3818280.0000};

        double[] Ymr = {174420.0000,87320.0000,142320.0000,266360.0000,769800.0000,2113820.0000,13971980.0000,17393940.0000,6029860.0000};
        double[] Yms = {272340.0000,125000.0000,186920.0000,325680.0000,770900.0000,2332820.0000,12997100.0000,8645920.0000,6153220.0000};
        double[] Ymi = {293540.0000,179160.0000,348220.0000,682320.0000,833840.0000,3623400.0000,11007900.0000,14592100.0000,6858920.0000};
        double[] Ymn = {299440.0000,188580.0000,446000.0000,706540.0000,1305500.0000,6132160.0000,10919980.0000,6879100.0000,6172660.0000};

        double[] Yqr = {201260.0000,72520.0000,135620.0000,263440.0000,1036060.0000,1405140.0000,2822540.0000,5558600.0000,3651920.0000};
        double[] Yqs = {229600.0000,73060.0000,205320.0000,265880.0000,538740.0000,1166500.0000,4042660.0000,6187060.0000,3265560.0000};
        double[] Yqi = {214460.0000,111620.0000,240120.0000,968260.0000,3171600.0000,9499700.0000,4730680.0000,18094100.0000,72704400.0000};
        double[] Yqn = {241980.0000,134880.0000,168280.0000,311020.0000,1216200.0000,1576560.0000,2813200.0000,6417160.0000,8831980.0000};

        double[] Yqur = {338080.0000,100760.0000,107120.0000,182340.0000,708040.0000,1132960.0000,1726960.0000,8226760.0000,4730540.0000};
        double[] Yqus = {205060.0000,146660.0000,81340.0000,132840.0000,413460.0000,597480.0000,1273940.0000,5646500.0000,5287160.0000};
        double[] Yqui = {183880.0000,147940.0000,250580.0000,985520.0000,3103540.0000,9707160.0000,4694080.0000,18359560.0000,72049020.0000};
        double[] Yqun = {225360.0000,144640.0000,199820.0000,249480.0000,1009000.0000,1080220.0000,2061620.0000,10593260.0000,5792220.0000};

        double[] Yqu = {12475340.0000, 11279740.0000, 11530620.0000, 8851100.0000};
        double[] Yqt = {960.0000, 1000.0000, 1060.0000, 1040.0000};

        //这是实验二中的resizingAList与AList的空间占用率比较数据
        double[] alist = {0.025390625,0.037109375,0.056640625,0.08984375,0.03515625,0.037109375,0.015625,0.056640625,0.091796875,0.02734375,0.080078125,0.01953125,0.0625,0.1015625,0.025390625,0.076171875,0.099609375,0.13671875,0.001953125,0.00390625,0.041015625,0.087890625,0.12890625,0.0,0.041015625,0.08203125,0.1328125,0.005859375,0.02734375,0.044921875,0.078125,0.123046875,0.0,0.037109375,0.072265625,0.115234375,0.03515625,0.083984375,0.046875,0.029296875,0.05859375,0.095703125,0.119140625,0.162109375,0.1953125,0.013671875,0.009765625,0.052734375,0.0859375,0.12109375,0.162109375,0.013671875,0.056640625,0.09375,0.130859375,0.16015625,0.185546875,0.228515625,0.01953125,0.0546875,0.08203125,0.115234375,0.14453125,0.19921875,0.248046875,0.275390625,0.3125,0.0078125,0.029296875,0.041015625,0.033203125,0.04296875,0.08203125,0.125,0.15625,0.212890625,0.2421875,0.28125,0.318359375,0.36328125,0.38671875,0.421875,0.46875,0.51171875,0.54296875,0.58984375,0.623046875,0.6484375,0.02734375,0.021484375,0.052734375,0.046875,0.015625,0.0546875,0.072265625,0.111328125,0.13671875,0.0,0.029296875,0.033203125,0.060546875,0.091796875,0.13671875,0.009765625,0.0078125,0.037109375,0.08984375,0.119140625,0.15625,0.015625,0.0078125,0.048828125,0.00390625,0.044921875,0.076171875,0.09375,0.13671875,0.189453125,0.23828125,0.00390625,0.05078125,0.08984375,0.1484375,0.001953125,0.01171875};
        double[] resizingalist = {0.8125,0.59375,0.90625,0.71875,0.5625,0.59375,0.5,0.90625,0.734375,0.21875,0.640625,0.625,1.0,0.8125,0.8125,0.609375,0.796875,0.546875,0.015625,0.25,0.65625,0.703125,0.515625,0.0,0.65625,0.65625,0.53125,0.0234375,0.4375,0.71875,0.625,0.984375,0.0,0.59375,0.578125,0.921875,0.5625,0.671875,0.75,0.9375,0.9375,0.765625,0.953125,0.6484375,0.78125,0.0546875,0.3125,0.84375,0.6875,0.96875,0.6484375,0.21875,0.90625,0.75,0.5234375,0.640625,0.7421875,0.9140625,0.15625,0.4375,0.65625,0.921875,0.578125,0.796875,0.9921875,0.55078125,0.625,0.0625,0.9375,0.65625,0.53125,0.6875,0.65625,0.5,0.625,0.8515625,0.96875,0.5625,0.63671875,0.7265625,0.7734375,0.84375,0.9375,0.51171875,0.54296875,0.58984375,0.623046875,0.6484375,0.4375,0.6875,0.84375,0.75,0.5,0.875,0.578125,0.890625,0.546875,0.0,0.9375,0.53125,0.96875,0.734375,0.546875,0.0390625,0.125,0.59375,0.71875,0.953125,0.625,0.125,0.0625,0.78125,0.0625,0.71875,0.609375,0.75,0.546875,0.7578125,0.953125,0.0625,0.8125,0.71875,0.59375,0.0625,0.75};

//        double[][] Y_raw = {Yqr, Yqur};
//        double[][] Y = ArrayLog10(Y_raw);
        double[][] Y = {alist, resizingalist};
        // jfreechart中使用XYSeries对象存储一组数据的(x,y)的序列，因为有三组数据所以创建三个XYSeries对象
//        XYSeries[] series = {new XYSeries("quick_update"), new XYSeries("quick_triple")};
//        XYSeries[] series = {new XYSeries("Selection"), new XYSeries("Insertion"), new XYSeries("Merge"), new XYSeries("Quick"), new XYSeries("Shell")};
        XYSeries[] series = {new XYSeries("AList"), new XYSeries("ResizingAList")};

        int N = X.length;
        int M = series.length;
        for(int i = 0; i < M; i++)
            for(int j = 0; j < N; j++)
                series[i].add(X[j], Y[i][j]);
        // 因为在该图表中显示的数据序列不止一组，所以在jfreechart中需要将多组数据序列存放到一个XYSeriesCollection对象中
        XYSeriesCollection dataset = new XYSeriesCollection();
        for(int i = 0; i < M; i++)
            dataset.addSeries(series[i]);

        return dataset;
    }

    public static void main(String[] args) {
//        LineXYDemo demo = new LineXYDemo("Comparison of sorting algorithm performance");
        LineXYDemo demo = new LineXYDemo("Comparison of the space utilization");
        demo.pack();
        demo.setVisible(true);
    }
}
